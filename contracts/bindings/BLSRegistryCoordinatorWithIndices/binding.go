// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractBLSRegistryCoordinatorWithIndices

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// IBLSRegistryCoordinatorWithIndicesOperatorKickParam is an auto generated low-level Go binding around an user-defined struct.
type IBLSRegistryCoordinatorWithIndicesOperatorKickParam struct {
	QuorumNumber uint8
	Operator     common.Address
	Pubkey       BN254G1Point
}

// IBLSRegistryCoordinatorWithIndicesOperatorSetParam is an auto generated low-level Go binding around an user-defined struct.
type IBLSRegistryCoordinatorWithIndicesOperatorSetParam struct {
	MaxOperatorCount        uint32
	KickBIPsOfOperatorStake uint16
	KickBIPsOfTotalStake    uint16
}

// IRegistryCoordinatorOperator is an auto generated low-level Go binding around an user-defined struct.
type IRegistryCoordinatorOperator struct {
	OperatorId [32]byte
	Status     uint8
}

// IRegistryCoordinatorQuorumBitmapUpdate is an auto generated low-level Go binding around an user-defined struct.
type IRegistryCoordinatorQuorumBitmapUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	QuorumBitmap          *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// ContractBLSRegistryCoordinatorWithIndicesMetaData contains all meta data concerning the ContractBLSRegistryCoordinatorWithIndices contract.
var ContractBLSRegistryCoordinatorWithIndicesMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"_slasher\",\"type\":\"address\"},{\"internalType\":\"contractIServiceManager\",\"name\":\"_serviceManager\",\"type\":\"address\"},{\"internalType\":\"contractIStakeRegistry\",\"name\":\"_stakeRegistry\",\"type\":\"address\"},{\"internalType\":\"contractIBLSPubkeyRegistry\",\"name\":\"_blsPubkeyRegistry\",\"type\":\"address\"},{\"internalType\":\"contractIIndexRegistry\",\"name\":\"_indexRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevChurnApprover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newChurnApprover\",\"type\":\"address\"}],\"name\":\"ChurnApproverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEjector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEjector\",\"type\":\"address\"}],\"name\":\"EjectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"OperatorDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam\",\"name\":\"operatorSetParams\",\"type\":\"tuple\"}],\"name\":\"OperatorSetParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"OperatorSocketUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_CHURN_APPROVAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blsPubkeyRegistry\",\"outputs\":[{\"internalType\":\"contractIBLSPubkeyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"registeringOperatorId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"}],\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorKickParam[]\",\"name\":\"operatorKickParams\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateOperatorChurnApprovalDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"churnApprover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"deregistrationData\",\"type\":\"bytes\"}],\"name\":\"deregisterOperatorWithCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"operatorIdsToSwap\",\"type\":\"bytes32[]\"}],\"name\":\"deregisterOperatorWithCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"operatorIdsToSwap\",\"type\":\"bytes32[]\"}],\"name\":\"ejectOperatorFromCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ejector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentQuorumBitmapByOperatorId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperator\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"enumIRegistryCoordinator.OperatorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structIRegistryCoordinator.Operator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getOperatorSetParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getOperatorStatus\",\"outputs\":[{\"internalType\":\"enumIRegistryCoordinator.OperatorStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getQuorumBitmapByOperatorIdAtBlockNumberByIndex\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"operatorIds\",\"type\":\"bytes32[]\"}],\"name\":\"getQuorumBitmapIndicesByOperatorIdsAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getQuorumBitmapUpdateByOperatorIdByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"quorumBitmap\",\"type\":\"uint192\"}],\"internalType\":\"structIRegistryCoordinator.QuorumBitmapUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"name\":\"getQuorumBitmapUpdateByOperatorIdLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexRegistry\",\"outputs\":[{\"internalType\":\"contractIIndexRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_churnApprover\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ejector\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam[]\",\"name\":\"_operatorSetParams\",\"type\":\"tuple[]\"},{\"internalType\":\"contractIPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPausedStatus\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isChurnApproverSaltUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRegistries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"}],\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorKickParam[]\",\"name\":\"operatorKickParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"name\":\"signatureWithSaltAndExpiry\",\"type\":\"tuple\"}],\"name\":\"registerOperatorWithCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"registrationData\",\"type\":\"bytes\"}],\"name\":\"registerOperatorWithCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"pubkey\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"registerOperatorWithCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceManager\",\"outputs\":[{\"internalType\":\"contractIServiceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_churnApprover\",\"type\":\"address\"}],\"name\":\"setChurnApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ejector\",\"type\":\"address\"}],\"name\":\"setEjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxOperatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfOperatorStake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"kickBIPsOfTotalStake\",\"type\":\"uint16\"}],\"internalType\":\"structIBLSRegistryCoordinatorWithIndices.OperatorSetParam\",\"name\":\"operatorSetParam\",\"type\":\"tuple\"}],\"name\":\"setOperatorSetParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contractIStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"socket\",\"type\":\"string\"}],\"name\":\"updateSocket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101e06040523480156200001257600080fd5b506040516200519938038062005199833981016040819052620000359162000183565b604080518082018252601681527f4156535265676973747279436f6f7264696e61746f720000000000000000000060208083019182528351808501909452600684526576302e302e3160d01b908401528151902060e08190527f6bda7e3f385e48841048390444cced5cc795af87758af67622e5f4f0882c4a996101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200012d8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c05261012052505050506001600160a01b0394851661014052928416610160529083166101a052821661018052166101c05262000203565b6001600160a01b03811681146200018057600080fd5b50565b600080600080600060a086880312156200019c57600080fd5b8551620001a9816200016a565b6020870151909550620001bc816200016a565b6040870151909450620001cf816200016a565b6060870151909350620001e2816200016a565b6080870151909250620001f5816200016a565b809150509295509295909350565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051614e9f620002fa6000396000818161055801528181611792015281816126af0152612f230152600081816104f801528181610d6301528181610e4a01528181610ebb0152818161171c0152818161262a0152612ea301526000818161040f0152818161175b015281816124810152612e0d015260008181610436015281816111d10152818161128c01528181611abb015261307c015260006105a501526000613901015260006139500152600061392b01526000613884015260006138ae015260006138d80152614e9f6000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063595c6a671161013b578063ab269b2d116100b8578063d72d8dd61161007c578063d72d8dd614610614578063e65797ad1461061c578063f807d627146106bf578063fabc1cbc146106d2578063fd39105a146106e557600080fd5b8063ab269b2d1461058d578063b1344271146105a0578063c66ab9ca146105c7578063c81b1ff4146105da578063ca0de882146105ed57600080fd5b806368304835116100ff57806368304835146104f357806385020d491461051a578063886f11951461053a5780639e9923c214610553578063a79323f61461057a57600080fd5b8063595c6a671461049e5780635ac86ab7146104a65780635b0b829f146104c55780635c975abb146104d85780636347c900146104e057600080fd5b806328f61b31116101c95780633561deb11161018d5780633561deb11461040a5780633998fdd3146104315780634b76b9d514610458578063526ea94e1461046b5780635865c60c1461047e57600080fd5b806328f61b311461039357806329d1e0c3146103a65780632cdd1e86146103b95780633064620d146103cc5780633431af25146103f757600080fd5b806310d67a2f1161021057806310d67a2f146102fe57806313542a4e14610311578063136439dd1461033a5780631478851f1461034d578063250075761461038057600080fd5b80630159f1ce14610242578063054310e614610290578063055a62b6146102bb5780630cf4b767146102e9575b600080fd5b610255610250366004613d0b565b610721565b60408051825163ffffffff908116825260208085015190911690820152918101516001600160c01b0316908201526060015b60405180910390f35b6036546102a3906001600160a01b031681565b6040516001600160a01b039091168152602001610287565b6102db6102c9366004613d2d565b60009081526033602052604090205490565b604051908152602001610287565b6102fc6102f7366004613e32565b6107b2565b005b6102fc61030c366004613e93565b6108b3565b6102db61031f366004613e93565b6001600160a01b031660009081526034602052604090205490565b6102fc610348366004613d2d565b610966565b61037061035b366004613d2d565b60376020526000908152604090205460ff1681565b6040519015158152602001610287565b6102fc61038e366004613fae565b610aaa565b6038546102a3906001600160a01b031681565b6102fc6103b4366004613e93565b6111cf565b6102fc6103c7366004613e93565b61128a565b6103df6103da3660046140c2565b611345565b6040516001600160c01b039091168152602001610287565b6103df610405366004613d2d565b611546565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b6102fc610466366004614182565b6115fc565b6102fc61047936600461425f565b611928565b61049161048c366004613e93565b611979565b6040516102879190614302565b6102fc6119ed565b6103706104b4366004614335565b6001805460ff9092161b9081161490565b6102fc6104d3366004614350565b611ab9565b6001546102db565b6102a36104ee366004613d2d565b611b79565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b61052d6105283660046143ea565b611ba3565b6040516102879190614439565b6000546102a3906201000090046001600160a01b031681565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b6102fc610588366004614483565b611ede565b6102db61059b36600461455a565b611f71565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b6102fc6105d536600461460e565b611fd3565b6102fc6105e836600461425f565b61203e565b6102db7f48a6757dfbb5a4e57e5212e267d3650e52026a40d20c8ff08a87be1ebb64d9af81565b6035546102db565b61068b61062a366004614335565b60408051606080820183526000808352602080840182905292840181905260ff9490941684526032825292829020825193840183525463ffffffff8116845261ffff600160201b8204811692850192909252600160301b9004169082015290565b60408051825163ffffffff16815260208084015161ffff908116918301919091529282015190921690820152606001610287565b6102fc6106cd366004614692565b612085565b6102fc6106e0366004613d2d565b6120b9565b6107146106f3366004613e93565b6001600160a01b031660009081526034602052604090206001015460ff1690565b604051610287919061470f565b6040805160608101825260008082526020820181905291810191909152600083815260336020526040902080548390811061075e5761075e61471d565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160c01b03600160401b909304929092169082015290505b92915050565b60013360009081526034602052604090206001015460ff1660028111156107db576107db6142ca565b146108675760405162461bcd60e51b815260206004820152604b60248201527f424c535265676973747279436f6f7264696e61746f7257697468496e6469636960448201527f65732e757064617465536f636b65743a206f70657261746f72206973206e6f7460648201526a081c9959da5cdd195c995960aa1b608482015260a4015b60405180910390fd5b33600090815260346020526040908190205490517fec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa916108a8918490614780565b60405180910390a150565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190614799565b6001600160a01b0316336001600160a01b03161461095a5760405162461bcd60e51b815260040161085e906147b6565b61096381612215565b50565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa1580156109b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d79190614800565b6109f35760405162461bcd60e51b815260040161085e90614822565b60015481811614610a6c5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c6974790000000000000000606482015260840161085e565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b600180546000919081161415610ad25760405162461bcd60e51b815260040161085e9061486a565b6000610b17338b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061231a92505050565b6040805160018082528183019092529192506000919060208083019080368337019050509050610b4689612899565b81600081518110610b5957610b5961471d565b602002602001018181525050610bdc81600081518110610b7b57610b7b61471d565b60200260200101518787808060200260200160405190810160405280939291908181526020016000905b82821015610bd157610bc2608083028601368190038101906148a1565b81526020019060010190610ba5565b5050505050866128dc565b60005b8a8110156111c15760008c8c83818110610bfb57610bfb61471d565b919091013560f81c6000818152603260209081526040918290208251606081018452905463ffffffff811680835261ffff600160201b8304811694840194909452600160301b90910490921692810192909252875192945090925090869085908110610c6957610c6961471d565b602002602001015163ffffffff1611610c835750506111af565b8160ff16898985818110610c9957610c9961471d565b610caf9260206080909202019081019150614335565b60ff1614610d485760405162461bcd60e51b81526020600482015260666024820152600080516020614e2a83398151915260448201527f732e72656769737465724f70657261746f7257697468436f6f7264696e61746f60648201527f723a2071756f72756d4e756d626572206e6f74207468652073616d65206173206084820152651cda59db995960d21b60a482015260c40161085e565b604051630c8f739d60e41b815260ff831660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c8f739d090602401602060405180830381865afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd691906148bd565b90506000603460008c8c88818110610df057610df061471d565b9050608002016020016020810190610e089190613e93565b6001600160a01b039081168252602082019290925260409081016000908120549151631aad4e3560e21b81526004810183905260ff88166024820152919350917f00000000000000000000000000000000000000000000000000000000000000001690636ab538d490604401602060405180830381865afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb591906148bd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636ab538d489600081518110610efb57610efb61471d565b6020026020010151886040518363ffffffff1660e01b8152600401610f2d92919091825260ff16602082015260400190565b602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e91906148bd565b602086015190915061271090610f889061ffff16846148fc565b610f92919061492b565b6001600160601b0316816001600160601b0316116110525760405162461bcd60e51b815260206004820152607d6024820152600080516020614e2a83398151915260448201527f732e72656769737465724f70657261746f7257697468436f6f7264696e61746f60648201527f723a207265676973746572696e67206f70657261746f7220686173206c65737360848201527f207468616e206b69636b424950734f664f70657261746f725374616b6500000060a482015260c40161085e565b6040850151612710906110699061ffff16866148fc565b611073919061492b565b6001600160601b0316826001600160601b03161061112c5760405162461bcd60e51b81526020600482015260766024820152600080516020614e2a83398151915260448201527f732e72656769737465724f70657261746f7257697468436f6f7264696e61746f60648201527f723a206f70657261746f7220746f206b69636b20686173206d6f7265207468616084820152756e206b69636b424950534f66546f74616c5374616b6560501b60a482015260c40161085e565b505050506111ac8989858181106111455761114561471d565b905060800201602001602081019061115d9190613e93565b8f8f869087600161116e919061495f565b9261117b93929190614977565b8c8c8881811061118d5761118d61471d565b9050608002016040018036038101906111a691906149a1565b88612aa7565b50505b806111b9816149bd565b915050610bdf565b505050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112519190614799565b6001600160a01b0316336001600160a01b0316146112815760405162461bcd60e51b815260040161085e906149d8565b6109638161315b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c9190614799565b6001600160a01b0316336001600160a01b03161461133c5760405162461bcd60e51b815260040161085e906149d8565b610963816131c4565b60008381526033602052604081208054829190849081106113685761136861471d565b600091825260209182902060408051606081018252929091015463ffffffff808216808552600160201b8304821695850195909552600160401b9091046001600160c01b031691830191909152909250851610156114685760405162461bcd60e51b815260206004820152607f6024820152600080516020614e2a83398151915260448201527f732e67657451756f72756d4269746d617042794f70657261746f72496441744260648201527f6c6f636b4e756d6265724279496e6465783a2071756f72756d4269746d61705560848201527f70646174652069732066726f6d20616674657220626c6f636b4e756d6265720060a482015260c40161085e565b8363ffffffff16816020015163ffffffff16118061148e5750602081015163ffffffff16155b61153a5760405162461bcd60e51b81526020600482015260806024820152600080516020614e2a83398151915260448201527f732e67657451756f72756d4269746d617042794f70657261746f72496441744260648201527f6c6f636b4e756d6265724279496e6465783a2071756f72756d4269746d61705560848201527f70646174652069732066726f6d206265666f726520626c6f636b4e756d62657260a482015260c40161085e565b60400151949350505050565b6000818152603360205260408120548015806115a257506000838152603360205260409020611576600183614a54565b815481106115865761158661471d565b600091825260209091200154600160201b900463ffffffff1615155b156115b05750600092915050565b60008381526033602052604090206115c9600183614a54565b815481106115d9576115d961471d565b600091825260209091200154600160401b90046001600160c01b03169392505050565b600054610100900460ff161580801561161c5750600054600160ff909116105b806116365750303b158015611636575060005460ff166001145b6116995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161085e565b6000805460ff1916600117905580156116bc576000805461ff0019166101001790555b6116c6838361322d565b6116cf8661315b565b6116d8856131c4565b603580546001808201835560008390527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d91820180546001600160a01b03199081167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116918217909355855480850187558501805483167f0000000000000000000000000000000000000000000000000000000000000000851617905585549384019095559190920180549091167f0000000000000000000000000000000000000000000000000000000000000000909216919091179055845160408051639aa1653d60e01b81529051919291639aa1653d916004808201926020929091908290030181865afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e9190614a6b565b61ffff16146118925760405162461bcd60e51b81526020600482015260466024820152600080516020614e2a83398151915260448201527f733a206f70657261746f722073657420706172616d73206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a40161085e565b60005b84518160ff1610156118d9576118c781868360ff16815181106118ba576118ba61471d565b6020026020010151613319565b806118d181614a88565b915050611895565b508015611920576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6001805460009190811614156119505760405162461bcd60e51b815260040161085e9061486a565b60008061195f84860186614aa8565b9150915061197033888885856133c6565b50505050505050565b60408051808201909152600080825260208201526001600160a01b0382166000908152603460209081526040918290208251808401909352805483526001810154909183019060ff1660028111156119d3576119d36142ca565b60028111156119e4576119e46142ca565b90525092915050565b60005460405163237dfb4760e11b8152336004820152620100009091046001600160a01b0316906346fbf68e90602401602060405180830381865afa158015611a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5e9190614800565b611a7a5760405162461bcd60e51b815260040161085e90614822565b600019600181905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b9190614799565b6001600160a01b0316336001600160a01b031614611b6b5760405162461bcd60e51b815260040161085e906149d8565b611b758282613319565b5050565b60358181548110611b8957600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600082516001600160401b03811115611bc057611bc0613d46565b604051908082528060200260200182016040528015611be9578160200160208202803683370190505b50905060005b8351811015611ed657600060336000868481518110611c1057611c1061471d565b6020026020010151815260200190815260200160002080549050905060005b8163ffffffff168163ffffffff161015611ec1578663ffffffff1660336000888681518110611c6057611c6061471d565b6020026020010151815260200190815260200160002060018385611c849190614aec565b611c8e9190614aec565b63ffffffff1681548110611ca457611ca461471d565b60009182526020909120015463ffffffff1611611eaf5760336000878581518110611cd157611cd161471d565b6020026020010151815260200190815260200160002060018284611cf59190614aec565b611cff9190614aec565b63ffffffff1681548110611d1557611d1561471d565b600091825260209091200154600160201b900463ffffffff161580611db157508663ffffffff1660336000888681518110611d5257611d5261471d565b6020026020010151815260200190815260200160002060018385611d769190614aec565b611d809190614aec565b63ffffffff1681548110611d9657611d9661471d565b600091825260209091200154600160201b900463ffffffff16115b611e685760405162461bcd60e51b81526020600482015260826024820152600080516020614e2a83398151915260448201527f732e67657451756f72756d4269746d6170496e646963657342794f706572617460648201527f6f724964734174426c6f636b4e756d6265723a206f70657261746f724964206860848201527f6173206e6f2071756f72756d4269746d61707320617420626c6f636b4e756d6260a48201526132b960f11b60c482015260e40161085e565b6001611e748284614aec565b611e7e9190614aec565b848481518110611e9057611e9061471d565b602002602001019063ffffffff16908163ffffffff1681525050611ec1565b80611eb981614b11565b915050611c2f565b50508080611ece906149bd565b915050611bef565b509392505050565b6038546001600160a01b03163314611f5d5760405162461bcd60e51b81526020600482015260486024820152600080516020614e2a83398151915260448201527f732e6f6e6c79456a6563746f723a2063616c6c6572206973206e6f74207468656064820152671032b532b1ba37b960c11b608482015260a40161085e565b611f6a8585858585612aa7565b5050505050565b6000611fca7f48a6757dfbb5a4e57e5212e267d3650e52026a40d20c8ff08a87be1ebb64d9af86868686604051602001611faf959493929190614b35565b604051602081830303815290604052805190602001206134dd565b95945050505050565b600180546000919081161415611ffb5760405162461bcd60e51b815260040161085e9061486a565b6119203387878787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133c692505050565b60018054600290811614156120655760405162461bcd60e51b815260040161085e9061486a565b60008061207484860186614bc9565b915091506119703388888585612aa7565b60018054600290811614156120ac5760405162461bcd60e51b815260040161085e9061486a565b611f6a3386868686612aa7565b600060029054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121309190614799565b6001600160a01b0316336001600160a01b0316146121605760405162461bcd60e51b815260040161085e906147b6565b6001541981196001541916146121de5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c6974790000000000000000606482015260840161085e565b600181905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610a9f565b6001600160a01b0381166122a35760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a40161085e565b600054604080516001600160a01b03620100009093048316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6060600061235d86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061352b92505050565b90506001600160c01b038111156123f25760405162461bcd60e51b815260206004820152606b6024820152600080516020614e2a8339815191526044820152600080516020614e0a83398151915260648201527f6f723a2071756f72756d4269746d61702065786365656473206f66206d61782060848201526a6269746d61702073697a6560a81b60a482015260c40161085e565b806124675760405162461bcd60e51b815260206004820152605c6024820152600080516020614e2a8339815191526044820152600080516020614e0a83398151915260648201527f6f723a2071756f72756d4269746d61702063616e6e6f74206265203000000000608482015260a40161085e565b6040516303ce4bad60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906303ce4bad906124bc908b908b908b908b90600401614c2a565b6020604051808303816000875af11580156124db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ff9190614c67565b6000818152603360205260409020549091508015612613576000828152603360205260408120612530600184614a54565b815481106125405761254061471d565b6000918252602090912001546001600160c01b03600160401b90910481811692508516161561260d5760405162461bcd60e51b81526020600482015260856024820152600080516020614e2a8339815191526044820152600080516020614e0a83398151915260648201527f6f723a206f70657261746f7220616c726561647920726567697374657265642060848201527f666f7220736f6d652071756f72756d73206265696e672072656769737465726560a48201526432103337b960d91b60c482015260e40161085e565b92909217915b604051632550477760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632550477790612665908c9086908d908d90600401614c80565b600060405180830381600087803b15801561267f57600080fd5b505af1158015612693573d6000803e3d6000fd5b505060405162bff04d60e01b8152600092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016915062bff04d906126e89086908d908d90600401614cb2565b6000604051808303816000875af1158015612707573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261272f9190810190614ccc565b6000848152603360209081526040808320815160608101835263ffffffff43811682528185018681526001600160c01b03808d16848701908152855460018181018855968a5298889020945194909801805492519851909116600160401b026001600160401b03988416600160201b0267ffffffffffffffff19909316949093169390931717959095169490941790935580518082019091528681529293508201526001600160a01b038b166000908152603460209081526040909120825181559082015160018083018054909160ff1990911690836002811115612816576128166142ca565b0217905550506040518491506001600160a01b038c16907fe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe90600090a37fec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa8387604051612884929190614780565b60405180910390a19998505050505050505050565b6000816000015182602001516040516020016128bf929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b60208082015160009081526037909152604090205460ff16156129a15760405162461bcd60e51b81526020600482015260776024820152600080516020614e2a83398151915260448201527f732e5f766572696679436875726e417070726f7665725369676e61747572654f60648201527f6e4f70657261746f72436875726e417070726f76616c3a20636875726e41707060848201527f726f7665722073616c7420616c7265616479207573656400000000000000000060a482015260c40161085e565b4281604001511015612a555760405162461bcd60e51b81526020600482015260776024820152600080516020614e2a83398151915260448201527f732e5f766572696679436875726e417070726f7665725369676e61747572654f60648201527f6e4f70657261746f72436875726e417070726f76616c3a20636875726e41707060848201527f726f766572207369676e6174757265206578706972656400000000000000000060a482015260c40161085e565b60365460208201516040830151612a84926001600160a01b031691612a7d9187918791611f71565b83516136b8565b6020908101516000908152603790915260409020805460ff191660011790555050565b60016001600160a01b03861660009081526034602052604090206001015460ff166002811115612ad957612ad96142ca565b14612b4e5760405162461bcd60e51b81526020600482015260606024820152600080516020614e2a8339815191526044820152600080516020614e4a83398151915260648201527f61746f723a206f70657261746f72206973206e6f742072656769737465726564608482015260a40161085e565b6001600160a01b038516600090815260346020526040902054612b7083612899565b8114612bfa5760405162461bcd60e51b815260206004820152606b6024820152600080516020614e2a8339815191526044820152600080516020614e4a83398151915260648201527f61746f723a206f70657261746f72496420646f6573206e6f74206d617463682060848201526a0e0eac4d6caf240d0c2e6d60ab1b60a482015260c40161085e565b6000612c3b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061352b92505050565b90506001600160c01b03811115612cdb5760405162461bcd60e51b81526020600482015260766024820152600080516020614e2a8339815191526044820152600080516020614e4a83398151915260648201527f61746f723a2071756f72756d73546f52656d6f76654269746d61702065786365608482015275656473206f66206d6178206269746d61702073697a6560501b60a482015260c40161085e565b600082815260336020526040812054612cf690600190614a54565b60008481526033602052604081208054929350909183908110612d1b57612d1b61471d565b6000918252602090912001546001600160c01b03600160401b90910481811692508416168314612de95760405162461bcd60e51b81526020600482015260856024820152600080516020614e2a8339815191526044820152600080516020614e4a83398151915260648201527f61746f723a2063616e6e6f742064657265676973746572206f70657261746f7260848201527f20666f722071756f72756d732074686174206974206973206e6f74206120706160a482015264393a1037b360d91b60c482015260e40161085e565b60405163121b4d9560e11b81526001600160c01b0382168414906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906324369b2a90612e48908d908d908d908d90600401614c2a565b6020604051808303816000875af1158015612e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8b9190614c67565b5060405163bd29b8cd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bd29b8cd90612edc9088908d908d90600401614cb2565b600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b5050604051630854259f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630854259f9150612f609088908d908d908c90600401614d65565b600060405180830381600087803b158015612f7a57600080fd5b505af1158015612f8e573d6000803e3d6000fd5b5050506000868152603360205260409020805443925085908110612fb457612fb461471d565b9060005260206000200160000160046101000a81548163ffffffff021916908363ffffffff16021790555080613078576000858152603360209081526040808320815160608101835263ffffffff43811682528185018681526001600160c01b038b198a168116958401958652845460018101865594885295909620915191909201805495519351909416600160401b026001600160401b03938316600160201b0267ffffffffffffffff199096169190921617939093171691909117905561314f565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663758f8dba6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fc9190614dc2565b6001600160a01b038c16600081815260346020526040808220600101805460ff191660021790555192935088927f396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e49190a3505b50505050505050505050565b603654604080516001600160a01b03928316815291831660208301527f315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c910160405180910390a1603680546001600160a01b0319166001600160a01b0392909216919091179055565b603854604080516001600160a01b03928316815291831660208301527f8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9910160405180910390a1603880546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b031615801561325457506001600160a01b03821615155b6132d65760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a40161085e565b600181905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2611b7582612215565b60ff8216600081815260326020908152604091829020845181548684018051888701805163ffffffff90951665ffffffffffff199094168417600160201b61ffff938416021767ffff0000000000001916600160301b95831695909502949094179094558551918252518316938101939093525116918101919091527f3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac9060600160405180910390a25050565b60006133d5868686868661231a565b905060005b815181101561197057603260008787848181106133f9576133f961471d565b919091013560f81c825250602081019190915260400160002054825163ffffffff909116908390839081106134305761343061471d565b602002602001015163ffffffff1611156134cb5760405162461bcd60e51b815260206004820152606e6024820152600080516020614e2a8339815191526044820152600080516020614e0a83398151915260648201527f6f72416e644e6f4f76657266696c6c656451756f72756d733a2071756f72756d60848201526d081a5cc81bdd995c999a5b1b195960921b60a482015260c40161085e565b806134d5816149bd565b9150506133da565b60006107ac6134ea613877565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000610100825111156135b45760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a40161085e565b81516135c257506000919050565b600080836000815181106135d8576135d861471d565b0160200151600160f89190911c81901b92505b84518110156136af578481815181106136065761360661471d565b0160200151600160f89190911c1b915082821161369b5760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a40161085e565b918117916136a8816149bd565b90506135eb565b50909392505050565b6001600160a01b0383163b156137d757604051630b135d3f60e11b808252906001600160a01b03851690631626ba7e906136f89086908690600401614780565b602060405180830381865afa158015613715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137399190614ddf565b6001600160e01b031916146137d25760405162461bcd60e51b815260206004820152605360248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a2045524331323731207369676e6174757265206064820152721d995c9a599a58d85d1a5bdb8819985a5b1959606a1b608482015260a40161085e565b505050565b826001600160a01b03166137eb838361399e565b6001600160a01b0316146137d25760405162461bcd60e51b815260206004820152604760248201527f454950313237315369676e61747572655574696c732e636865636b5369676e6160448201527f747572655f454950313237313a207369676e6174757265206e6f742066726f6d6064820152661039b4b3b732b960c91b608482015260a40161085e565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156138d057507f000000000000000000000000000000000000000000000000000000000000000046145b156138fa57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008060006139ad85856139ba565b91509150611ed681613a2a565b6000808251604114156139f15760208301516040840151606085015160001a6139e587828585613be5565b94509450505050613a23565b825160401415613a1b5760208301516040840151613a10868383613cd2565b935093505050613a23565b506000905060025b9250929050565b6000816004811115613a3e57613a3e6142ca565b1415613a475750565b6001816004811115613a5b57613a5b6142ca565b1415613aa95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161085e565b6002816004811115613abd57613abd6142ca565b1415613b0b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161085e565b6003816004811115613b1f57613b1f6142ca565b1415613b785760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161085e565b6004816004811115613b8c57613b8c6142ca565b14156109635760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161085e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613c1c5750600090506003613cc9565b8460ff16601b14158015613c3457508460ff16601c14155b15613c455750600090506004613cc9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613c99573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613cc257600060019250925050613cc9565b9150600090505b94509492505050565b6000806001600160ff1b03831681613cef60ff86901c601b61495f565b9050613cfd87828885613be5565b935093505050935093915050565b60008060408385031215613d1e57600080fd5b50508035926020909101359150565b600060208284031215613d3f57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613d7e57613d7e613d46565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613dac57613dac613d46565b604052919050565b60006001600160401b03831115613dcd57613dcd613d46565b613de0601f8401601f1916602001613d84565b9050828152838383011115613df457600080fd5b828260208301376000602084830101529392505050565b600082601f830112613e1c57600080fd5b613e2b83833560208501613db4565b9392505050565b600060208284031215613e4457600080fd5b81356001600160401b03811115613e5a57600080fd5b613e6684828501613e0b565b949350505050565b6001600160a01b038116811461096357600080fd5b8035613e8e81613e6e565b919050565b600060208284031215613ea557600080fd5b8135613e2b81613e6e565b60008083601f840112613ec257600080fd5b5081356001600160401b03811115613ed957600080fd5b602083019150836020828501011115613a2357600080fd5b600060408284031215613f0357600080fd5b604051604081018181106001600160401b0382111715613f2557613f25613d46565b604052823581526020928301359281019290925250919050565b600060608284031215613f5157600080fd5b613f59613d5c565b905081356001600160401b03811115613f7157600080fd5b8201601f81018413613f8257600080fd5b613f9184823560208401613db4565b825250602082013560208201526040820135604082015292915050565b60008060008060008060008060c0898b031215613fca57600080fd5b88356001600160401b0380821115613fe157600080fd5b613fed8c838d01613eb0565b909a5098508891506140028c60208d01613ef1565b975060608b013591508082111561401857600080fd5b6140248c838d01613eb0565b909750955060808b013591508082111561403d57600080fd5b818b0191508b601f83011261405157600080fd5b81358181111561406057600080fd5b8c60208260071b850101111561407557600080fd5b6020830195508094505060a08b013591508082111561409357600080fd5b506140a08b828c01613f3f565b9150509295985092959890939650565b63ffffffff8116811461096357600080fd5b6000806000606084860312156140d757600080fd5b8335925060208401356140e9816140b0565b929592945050506040919091013590565b60006001600160401b0382111561411357614113613d46565b5060051b60200190565b61ffff8116811461096357600080fd5b60006060828403121561413f57600080fd5b614147613d5c565b90508135614154816140b0565b815260208201356141648161411d565b602082015260408201356141778161411d565b604082015292915050565b600080600080600060a0868803121561419a57600080fd5b85356141a581613e6e565b94506020868101356141b681613e6e565b945060408701356001600160401b038111156141d157600080fd5b8701601f810189136141e257600080fd5b80356141f56141f0826140fa565b613d84565b8181526060918202830184019184820191908c84111561421457600080fd5b938501935b8385101561423a5761422b8d8661412d565b83529384019391850191614219565b819850614248818d01613e83565b9a9d999c50979a6080013598975050505050505050565b6000806000806040858703121561427557600080fd5b84356001600160401b038082111561428c57600080fd5b61429888838901613eb0565b909650945060208701359150808211156142b157600080fd5b506142be87828801613eb0565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b600381106142fe57634e487b7160e01b600052602160045260246000fd5b9052565b81518152602080830151604083019161431d908401826142e0565b5092915050565b803560ff81168114613e8e57600080fd5b60006020828403121561434757600080fd5b613e2b82614324565b6000806080838503121561436357600080fd5b61436c83614324565b915061437b846020850161412d565b90509250929050565b600082601f83011261439557600080fd5b813560206143a56141f0836140fa565b82815260059290921b840181019181810190868411156143c457600080fd5b8286015b848110156143df57803583529183019183016143c8565b509695505050505050565b600080604083850312156143fd57600080fd5b8235614408816140b0565b915060208301356001600160401b0381111561442357600080fd5b61442f85828601614384565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561447757835163ffffffff1683529284019291840191600101614455565b50909695505050505050565b600080600080600060a0868803121561449b57600080fd5b85356144a681613e6e565b945060208601356001600160401b03808211156144c257600080fd5b6144ce89838a01613eb0565b90965094508491506144e38960408a01613ef1565b935060808801359150808211156144f957600080fd5b5061450688828901614384565b9150509295509295909350565b60006080828403121561452557600080fd5b61452d613d5c565b905061453882614324565b8152602082013561454881613e6e565b60208201526141778360408401613ef1565b600080600080608080868803121561457157600080fd5b853594506020808701356001600160401b0381111561458f57600080fd5b8701601f810189136145a057600080fd5b80356145ae6141f0826140fa565b81815260079190911b8201830190838101908b8311156145cd57600080fd5b928401925b828410156145f3576145e48c85614513565b825292850192908401906145d2565b989b989a505050506040870135966060013595945050505050565b60008060008060006080868803121561462657600080fd5b85356001600160401b038082111561463d57600080fd5b61464989838a01613eb0565b909750955085915061465e8960208a01613ef1565b9450606088013591508082111561467457600080fd5b5061468188828901613eb0565b969995985093965092949392505050565b600080600080608085870312156146a857600080fd5b84356001600160401b03808211156146bf57600080fd5b6146cb88838901613eb0565b90965094508491506146e08860208901613ef1565b935060608701359150808211156146f657600080fd5b5061470387828801614384565b91505092959194509250565b602081016107ac82846142e0565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156147595760208185018101518683018201520161473d565b8181111561476b576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000613e666040830184614733565b6000602082840312156147ab57600080fd5b8151613e2b81613e6e565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561481257600080fd5b81518015158114613e2b57600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b60208082526019908201527f5061757361626c653a20696e6465782069732070617573656400000000000000604082015260600190565b6000608082840312156148b357600080fd5b613e2b8383614513565b6000602082840312156148cf57600080fd5b81516001600160601b0381168114613e2b57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0380831681851681830481118215151615614922576149226148e6565b02949350505050565b60006001600160601b038084168061495357634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b60008219821115614972576149726148e6565b500190565b6000808585111561498757600080fd5b8386111561499457600080fd5b5050820193919092039150565b6000604082840312156149b357600080fd5b613e2b8383613ef1565b60006000198214156149d1576149d16148e6565b5060010190565b6020808252606290820152600080516020614e2a83398151915260408201527f732e6f6e6c79536572766963654d616e616765724f776e65723a2063616c6c6560608201527f72206973206e6f74207468652073657276696365206d616e61676572206f776e60808201526132b960f11b60a082015260c00190565b600082821015614a6657614a666148e6565b500390565b600060208284031215614a7d57600080fd5b8151613e2b8161411d565b600060ff821660ff811415614a9f57614a9f6148e6565b60010192915050565b60008060608385031215614abb57600080fd5b614ac58484613ef1565b915060408301356001600160401b03811115614ae057600080fd5b61442f85828601613e0b565b600063ffffffff83811690831681811015614b0957614b096148e6565b039392505050565b600063ffffffff80831681811415614b2b57614b2b6148e6565b6001019392505050565b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b81811015614bb0578551805160ff168452858101516001600160a01b031686850152840151614b9c8585018280518252602090810151910152565b509484019460809290920191600101614b61565b5050606086019790975250505050608001529392505050565b60008060608385031215614bdc57600080fd5b614be68484613ef1565b915060408301356001600160401b0381111561442357600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0385168152608060208201819052600090614c4f9083018587614c01565b83516040840152602084015160608401529050611fca565b600060208284031215614c7957600080fd5b5051919050565b60018060a01b0385168152836020820152606060408201526000614ca8606083018486614c01565b9695505050505050565b838152604060208201526000611fca604083018486614c01565b60006020808385031215614cdf57600080fd5b82516001600160401b03811115614cf557600080fd5b8301601f81018513614d0657600080fd5b8051614d146141f0826140fa565b81815260059190911b82018301908381019087831115614d3357600080fd5b928401925b82841015614d5a578351614d4b816140b0565b82529284019290840190614d38565b979650505050505050565b84815260006020606081840152614d80606084018688614c01565b838103604085015284518082528286019183019060005b81811015614db357835183529284019291840191600101614d97565b50909998505050505050505050565b600060208284031215614dd457600080fd5b8151613e2b816140b0565b600060208284031215614df157600080fd5b81516001600160e01b031981168114613e2b57600080fdfe732e5f72656769737465724f70657261746f7257697468436f6f7264696e6174424c535265676973747279436f6f7264696e61746f7257697468496e64696365732e5f646572656769737465724f70657261746f7257697468436f6f7264696ea2646970667358221220abccd077dc3c131ba33579c05e352ad24176c911ad8d5207a8e1961e852902c464736f6c634300080c0033",
}

// ContractBLSRegistryCoordinatorWithIndicesABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractBLSRegistryCoordinatorWithIndicesMetaData.ABI instead.
var ContractBLSRegistryCoordinatorWithIndicesABI = ContractBLSRegistryCoordinatorWithIndicesMetaData.ABI

// ContractBLSRegistryCoordinatorWithIndicesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractBLSRegistryCoordinatorWithIndicesMetaData.Bin instead.
var ContractBLSRegistryCoordinatorWithIndicesBin = ContractBLSRegistryCoordinatorWithIndicesMetaData.Bin

// DeployContractBLSRegistryCoordinatorWithIndices deploys a new Ethereum contract, binding an instance of ContractBLSRegistryCoordinatorWithIndices to it.
func DeployContractBLSRegistryCoordinatorWithIndices(auth *bind.TransactOpts, backend bind.ContractBackend, _slasher common.Address, _serviceManager common.Address, _stakeRegistry common.Address, _blsPubkeyRegistry common.Address, _indexRegistry common.Address) (common.Address, *types.Transaction, *ContractBLSRegistryCoordinatorWithIndices, error) {
	parsed, err := ContractBLSRegistryCoordinatorWithIndicesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBLSRegistryCoordinatorWithIndicesBin), backend, _slasher, _serviceManager, _stakeRegistry, _blsPubkeyRegistry, _indexRegistry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractBLSRegistryCoordinatorWithIndices{ContractBLSRegistryCoordinatorWithIndicesCaller: ContractBLSRegistryCoordinatorWithIndicesCaller{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesTransactor: ContractBLSRegistryCoordinatorWithIndicesTransactor{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesFilterer: ContractBLSRegistryCoordinatorWithIndicesFilterer{contract: contract}}, nil
}

// ContractBLSRegistryCoordinatorWithIndices is an auto generated Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndices struct {
	ContractBLSRegistryCoordinatorWithIndicesCaller     // Read-only binding to the contract
	ContractBLSRegistryCoordinatorWithIndicesTransactor // Write-only binding to the contract
	ContractBLSRegistryCoordinatorWithIndicesFilterer   // Log filterer for contract events
}

// ContractBLSRegistryCoordinatorWithIndicesCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBLSRegistryCoordinatorWithIndicesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBLSRegistryCoordinatorWithIndicesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractBLSRegistryCoordinatorWithIndicesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractBLSRegistryCoordinatorWithIndicesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractBLSRegistryCoordinatorWithIndicesSession struct {
	Contract     *ContractBLSRegistryCoordinatorWithIndices // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                              // Call options to use throughout this session
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// ContractBLSRegistryCoordinatorWithIndicesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractBLSRegistryCoordinatorWithIndicesCallerSession struct {
	Contract *ContractBLSRegistryCoordinatorWithIndicesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                                    // Call options to use throughout this session
}

// ContractBLSRegistryCoordinatorWithIndicesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractBLSRegistryCoordinatorWithIndicesTransactorSession struct {
	Contract     *ContractBLSRegistryCoordinatorWithIndicesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                                    // Transaction auth options to use throughout this session
}

// ContractBLSRegistryCoordinatorWithIndicesRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesRaw struct {
	Contract *ContractBLSRegistryCoordinatorWithIndices // Generic contract binding to access the raw methods on
}

// ContractBLSRegistryCoordinatorWithIndicesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesCallerRaw struct {
	Contract *ContractBLSRegistryCoordinatorWithIndicesCaller // Generic read-only contract binding to access the raw methods on
}

// ContractBLSRegistryCoordinatorWithIndicesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractBLSRegistryCoordinatorWithIndicesTransactorRaw struct {
	Contract *ContractBLSRegistryCoordinatorWithIndicesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractBLSRegistryCoordinatorWithIndices creates a new instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndices(address common.Address, backend bind.ContractBackend) (*ContractBLSRegistryCoordinatorWithIndices, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndices{ContractBLSRegistryCoordinatorWithIndicesCaller: ContractBLSRegistryCoordinatorWithIndicesCaller{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesTransactor: ContractBLSRegistryCoordinatorWithIndicesTransactor{contract: contract}, ContractBLSRegistryCoordinatorWithIndicesFilterer: ContractBLSRegistryCoordinatorWithIndicesFilterer{contract: contract}}, nil
}

// NewContractBLSRegistryCoordinatorWithIndicesCaller creates a new read-only instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndicesCaller(address common.Address, caller bind.ContractCaller) (*ContractBLSRegistryCoordinatorWithIndicesCaller, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesCaller{contract: contract}, nil
}

// NewContractBLSRegistryCoordinatorWithIndicesTransactor creates a new write-only instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndicesTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractBLSRegistryCoordinatorWithIndicesTransactor, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesTransactor{contract: contract}, nil
}

// NewContractBLSRegistryCoordinatorWithIndicesFilterer creates a new log filterer instance of ContractBLSRegistryCoordinatorWithIndices, bound to a specific deployed contract.
func NewContractBLSRegistryCoordinatorWithIndicesFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractBLSRegistryCoordinatorWithIndicesFilterer, error) {
	contract, err := bindContractBLSRegistryCoordinatorWithIndices(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesFilterer{contract: contract}, nil
}

// bindContractBLSRegistryCoordinatorWithIndices binds a generic wrapper to an already deployed contract.
func bindContractBLSRegistryCoordinatorWithIndices(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractBLSRegistryCoordinatorWithIndicesMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ContractBLSRegistryCoordinatorWithIndicesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ContractBLSRegistryCoordinatorWithIndicesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ContractBLSRegistryCoordinatorWithIndicesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.contract.Transact(opts, method, params...)
}

// OPERATORCHURNAPPROVALTYPEHASH is a free data retrieval call binding the contract method 0xca0de882.
//
// Solidity: function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) OPERATORCHURNAPPROVALTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "OPERATOR_CHURN_APPROVAL_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OPERATORCHURNAPPROVALTYPEHASH is a free data retrieval call binding the contract method 0xca0de882.
//
// Solidity: function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) OPERATORCHURNAPPROVALTYPEHASH() ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.OPERATORCHURNAPPROVALTYPEHASH(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// OPERATORCHURNAPPROVALTYPEHASH is a free data retrieval call binding the contract method 0xca0de882.
//
// Solidity: function OPERATOR_CHURN_APPROVAL_TYPEHASH() view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) OPERATORCHURNAPPROVALTYPEHASH() ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.OPERATORCHURNAPPROVALTYPEHASH(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) BlsPubkeyRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "blsPubkeyRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.BlsPubkeyRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.BlsPubkeyRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// CalculateOperatorChurnApprovalDigestHash is a free data retrieval call binding the contract method 0xab269b2d.
//
// Solidity: function calculateOperatorChurnApprovalDigestHash(bytes32 registeringOperatorId, (uint8,address,(uint256,uint256))[] operatorKickParams, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) CalculateOperatorChurnApprovalDigestHash(opts *bind.CallOpts, registeringOperatorId [32]byte, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "calculateOperatorChurnApprovalDigestHash", registeringOperatorId, operatorKickParams, salt, expiry)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateOperatorChurnApprovalDigestHash is a free data retrieval call binding the contract method 0xab269b2d.
//
// Solidity: function calculateOperatorChurnApprovalDigestHash(bytes32 registeringOperatorId, (uint8,address,(uint256,uint256))[] operatorKickParams, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) CalculateOperatorChurnApprovalDigestHash(registeringOperatorId [32]byte, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.CalculateOperatorChurnApprovalDigestHash(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, registeringOperatorId, operatorKickParams, salt, expiry)
}

// CalculateOperatorChurnApprovalDigestHash is a free data retrieval call binding the contract method 0xab269b2d.
//
// Solidity: function calculateOperatorChurnApprovalDigestHash(bytes32 registeringOperatorId, (uint8,address,(uint256,uint256))[] operatorKickParams, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) CalculateOperatorChurnApprovalDigestHash(registeringOperatorId [32]byte, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.CalculateOperatorChurnApprovalDigestHash(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, registeringOperatorId, operatorKickParams, salt, expiry)
}

// ChurnApprover is a free data retrieval call binding the contract method 0x054310e6.
//
// Solidity: function churnApprover() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) ChurnApprover(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "churnApprover")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChurnApprover is a free data retrieval call binding the contract method 0x054310e6.
//
// Solidity: function churnApprover() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) ChurnApprover() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// ChurnApprover is a free data retrieval call binding the contract method 0x054310e6.
//
// Solidity: function churnApprover() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) ChurnApprover() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Ejector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "ejector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Ejector() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Ejector(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Ejector is a free data retrieval call binding the contract method 0x28f61b31.
//
// Solidity: function ejector() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Ejector() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Ejector(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// GetCurrentQuorumBitmapByOperatorId is a free data retrieval call binding the contract method 0x3431af25.
//
// Solidity: function getCurrentQuorumBitmapByOperatorId(bytes32 operatorId) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetCurrentQuorumBitmapByOperatorId(opts *bind.CallOpts, operatorId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getCurrentQuorumBitmapByOperatorId", operatorId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentQuorumBitmapByOperatorId is a free data retrieval call binding the contract method 0x3431af25.
//
// Solidity: function getCurrentQuorumBitmapByOperatorId(bytes32 operatorId) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetCurrentQuorumBitmapByOperatorId(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetCurrentQuorumBitmapByOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetCurrentQuorumBitmapByOperatorId is a free data retrieval call binding the contract method 0x3431af25.
//
// Solidity: function getCurrentQuorumBitmapByOperatorId(bytes32 operatorId) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetCurrentQuorumBitmapByOperatorId(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetCurrentQuorumBitmapByOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((bytes32,uint8))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperator(opts *bind.CallOpts, operator common.Address) (IRegistryCoordinatorOperator, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperator", operator)

	if err != nil {
		return *new(IRegistryCoordinatorOperator), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryCoordinatorOperator)).(*IRegistryCoordinatorOperator)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((bytes32,uint8))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperator(operator common.Address) (IRegistryCoordinatorOperator, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperator(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address operator) view returns((bytes32,uint8))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperator(operator common.Address) (IRegistryCoordinatorOperator, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperator(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorId(opts *bind.CallOpts, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorId", operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorId(operator common.Address) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorId is a free data retrieval call binding the contract method 0x13542a4e.
//
// Solidity: function getOperatorId(address operator) view returns(bytes32)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorId(operator common.Address) ([32]byte, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorId(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorSetParams is a free data retrieval call binding the contract method 0xe65797ad.
//
// Solidity: function getOperatorSetParams(uint8 quorumNumber) view returns((uint32,uint16,uint16))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorSetParams(opts *bind.CallOpts, quorumNumber uint8) (IBLSRegistryCoordinatorWithIndicesOperatorSetParam, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorSetParams", quorumNumber)

	if err != nil {
		return *new(IBLSRegistryCoordinatorWithIndicesOperatorSetParam), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSRegistryCoordinatorWithIndicesOperatorSetParam)).(*IBLSRegistryCoordinatorWithIndicesOperatorSetParam)

	return out0, err

}

// GetOperatorSetParams is a free data retrieval call binding the contract method 0xe65797ad.
//
// Solidity: function getOperatorSetParams(uint8 quorumNumber) view returns((uint32,uint16,uint16))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorSetParams(quorumNumber uint8) (IBLSRegistryCoordinatorWithIndicesOperatorSetParam, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, quorumNumber)
}

// GetOperatorSetParams is a free data retrieval call binding the contract method 0xe65797ad.
//
// Solidity: function getOperatorSetParams(uint8 quorumNumber) view returns((uint32,uint16,uint16))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorSetParams(quorumNumber uint8) (IBLSRegistryCoordinatorWithIndicesOperatorSetParam, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, quorumNumber)
}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetOperatorStatus(opts *bind.CallOpts, operator common.Address) (uint8, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getOperatorStatus", operator)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetOperatorStatus(operator common.Address) (uint8, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorStatus(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetOperatorStatus is a free data retrieval call binding the contract method 0xfd39105a.
//
// Solidity: function getOperatorStatus(address operator) view returns(uint8)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetOperatorStatus(operator common.Address) (uint8, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetOperatorStatus(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operator)
}

// GetQuorumBitmapByOperatorIdAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x3064620d.
//
// Solidity: function getQuorumBitmapByOperatorIdAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(opts *bind.CallOpts, operatorId [32]byte, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapByOperatorIdAtBlockNumberByIndex", operatorId, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetQuorumBitmapByOperatorIdAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x3064620d.
//
// Solidity: function getQuorumBitmapByOperatorIdAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(operatorId [32]byte, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, blockNumber, index)
}

// GetQuorumBitmapByOperatorIdAtBlockNumberByIndex is a free data retrieval call binding the contract method 0x3064620d.
//
// Solidity: function getQuorumBitmapByOperatorIdAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) view returns(uint192)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(operatorId [32]byte, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapByOperatorIdAtBlockNumberByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, blockNumber, index)
}

// GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber is a free data retrieval call binding the contract method 0x85020d49.
//
// Solidity: function getQuorumBitmapIndicesByOperatorIdsAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns(uint32[])
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, operatorIds [][32]byte) ([]uint32, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapIndicesByOperatorIdsAtBlockNumber", blockNumber, operatorIds)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber is a free data retrieval call binding the contract method 0x85020d49.
//
// Solidity: function getQuorumBitmapIndicesByOperatorIdsAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns(uint32[])
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(blockNumber uint32, operatorIds [][32]byte) ([]uint32, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, blockNumber, operatorIds)
}

// GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber is a free data retrieval call binding the contract method 0x85020d49.
//
// Solidity: function getQuorumBitmapIndicesByOperatorIdsAtBlockNumber(uint32 blockNumber, bytes32[] operatorIds) view returns(uint32[])
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(blockNumber uint32, operatorIds [][32]byte) ([]uint32, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapIndicesByOperatorIdsAtBlockNumber(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, blockNumber, operatorIds)
}

// GetQuorumBitmapUpdateByOperatorIdByIndex is a free data retrieval call binding the contract method 0x0159f1ce.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdByIndex(bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapUpdateByOperatorIdByIndex(opts *bind.CallOpts, operatorId [32]byte, index *big.Int) (IRegistryCoordinatorQuorumBitmapUpdate, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapUpdateByOperatorIdByIndex", operatorId, index)

	if err != nil {
		return *new(IRegistryCoordinatorQuorumBitmapUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IRegistryCoordinatorQuorumBitmapUpdate)).(*IRegistryCoordinatorQuorumBitmapUpdate)

	return out0, err

}

// GetQuorumBitmapUpdateByOperatorIdByIndex is a free data retrieval call binding the contract method 0x0159f1ce.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdByIndex(bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapUpdateByOperatorIdByIndex(operatorId [32]byte, index *big.Int) (IRegistryCoordinatorQuorumBitmapUpdate, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, index)
}

// GetQuorumBitmapUpdateByOperatorIdByIndex is a free data retrieval call binding the contract method 0x0159f1ce.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdByIndex(bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint192))
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapUpdateByOperatorIdByIndex(operatorId [32]byte, index *big.Int) (IRegistryCoordinatorQuorumBitmapUpdate, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdByIndex(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId, index)
}

// GetQuorumBitmapUpdateByOperatorIdLength is a free data retrieval call binding the contract method 0x055a62b6.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdLength(bytes32 operatorId) view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) GetQuorumBitmapUpdateByOperatorIdLength(opts *bind.CallOpts, operatorId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "getQuorumBitmapUpdateByOperatorIdLength", operatorId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetQuorumBitmapUpdateByOperatorIdLength is a free data retrieval call binding the contract method 0x055a62b6.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdLength(bytes32 operatorId) view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) GetQuorumBitmapUpdateByOperatorIdLength(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdLength(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// GetQuorumBitmapUpdateByOperatorIdLength is a free data retrieval call binding the contract method 0x055a62b6.
//
// Solidity: function getQuorumBitmapUpdateByOperatorIdLength(bytes32 operatorId) view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) GetQuorumBitmapUpdateByOperatorIdLength(operatorId [32]byte) (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.GetQuorumBitmapUpdateByOperatorIdLength(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, operatorId)
}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) IndexRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "indexRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) IndexRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IndexRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// IndexRegistry is a free data retrieval call binding the contract method 0x9e9923c2.
//
// Solidity: function indexRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) IndexRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IndexRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// IsChurnApproverSaltUsed is a free data retrieval call binding the contract method 0x1478851f.
//
// Solidity: function isChurnApproverSaltUsed(bytes32 ) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) IsChurnApproverSaltUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "isChurnApproverSaltUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsChurnApproverSaltUsed is a free data retrieval call binding the contract method 0x1478851f.
//
// Solidity: function isChurnApproverSaltUsed(bytes32 ) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) IsChurnApproverSaltUsed(arg0 [32]byte) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IsChurnApproverSaltUsed(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// IsChurnApproverSaltUsed is a free data retrieval call binding the contract method 0x1478851f.
//
// Solidity: function isChurnApproverSaltUsed(bytes32 ) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) IsChurnApproverSaltUsed(arg0 [32]byte) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.IsChurnApproverSaltUsed(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// NumRegistries is a free data retrieval call binding the contract method 0xd72d8dd6.
//
// Solidity: function numRegistries() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) NumRegistries(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "numRegistries")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumRegistries is a free data retrieval call binding the contract method 0xd72d8dd6.
//
// Solidity: function numRegistries() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) NumRegistries() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.NumRegistries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// NumRegistries is a free data retrieval call binding the contract method 0xd72d8dd6.
//
// Solidity: function numRegistries() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) NumRegistries() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.NumRegistries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Paused(index uint8) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Paused(index uint8) (bool, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Paused0() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused0(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Paused0() (*big.Int, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Paused0(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) PauserRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Registries is a free data retrieval call binding the contract method 0x6347c900.
//
// Solidity: function registries(uint256 ) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Registries(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "registries", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registries is a free data retrieval call binding the contract method 0x6347c900.
//
// Solidity: function registries(uint256 ) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Registries(arg0 *big.Int) (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Registries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// Registries is a free data retrieval call binding the contract method 0x6347c900.
//
// Solidity: function registries(uint256 ) view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Registries(arg0 *big.Int) (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Registries(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts, arg0)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) ServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "serviceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) ServiceManager() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ServiceManager(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// ServiceManager is a free data retrieval call binding the contract method 0x3998fdd3.
//
// Solidity: function serviceManager() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) ServiceManager() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.ServiceManager(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Slasher() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Slasher(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) Slasher() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Slasher(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractBLSRegistryCoordinatorWithIndices.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) StakeRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.StakeRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.StakeRegistry(&_ContractBLSRegistryCoordinatorWithIndices.CallOpts)
}

// DeregisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0xc81b1ff4.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, bytes deregistrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) DeregisterOperatorWithCoordinator(opts *bind.TransactOpts, quorumNumbers []byte, deregistrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "deregisterOperatorWithCoordinator", quorumNumbers, deregistrationData)
}

// DeregisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0xc81b1ff4.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, bytes deregistrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) DeregisterOperatorWithCoordinator(quorumNumbers []byte, deregistrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, deregistrationData)
}

// DeregisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0xc81b1ff4.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, bytes deregistrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) DeregisterOperatorWithCoordinator(quorumNumbers []byte, deregistrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, deregistrationData)
}

// DeregisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0xf807d627.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, bytes32[] operatorIdsToSwap) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) DeregisterOperatorWithCoordinator0(opts *bind.TransactOpts, quorumNumbers []byte, pubkey BN254G1Point, operatorIdsToSwap [][32]byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "deregisterOperatorWithCoordinator0", quorumNumbers, pubkey, operatorIdsToSwap)
}

// DeregisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0xf807d627.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, bytes32[] operatorIdsToSwap) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) DeregisterOperatorWithCoordinator0(quorumNumbers []byte, pubkey BN254G1Point, operatorIdsToSwap [][32]byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, operatorIdsToSwap)
}

// DeregisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0xf807d627.
//
// Solidity: function deregisterOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, bytes32[] operatorIdsToSwap) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) DeregisterOperatorWithCoordinator0(quorumNumbers []byte, pubkey BN254G1Point, operatorIdsToSwap [][32]byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.DeregisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, operatorIdsToSwap)
}

// EjectOperatorFromCoordinator is a paid mutator transaction binding the contract method 0xa79323f6.
//
// Solidity: function ejectOperatorFromCoordinator(address operator, bytes quorumNumbers, (uint256,uint256) pubkey, bytes32[] operatorIdsToSwap) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) EjectOperatorFromCoordinator(opts *bind.TransactOpts, operator common.Address, quorumNumbers []byte, pubkey BN254G1Point, operatorIdsToSwap [][32]byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "ejectOperatorFromCoordinator", operator, quorumNumbers, pubkey, operatorIdsToSwap)
}

// EjectOperatorFromCoordinator is a paid mutator transaction binding the contract method 0xa79323f6.
//
// Solidity: function ejectOperatorFromCoordinator(address operator, bytes quorumNumbers, (uint256,uint256) pubkey, bytes32[] operatorIdsToSwap) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) EjectOperatorFromCoordinator(operator common.Address, quorumNumbers []byte, pubkey BN254G1Point, operatorIdsToSwap [][32]byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.EjectOperatorFromCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, operator, quorumNumbers, pubkey, operatorIdsToSwap)
}

// EjectOperatorFromCoordinator is a paid mutator transaction binding the contract method 0xa79323f6.
//
// Solidity: function ejectOperatorFromCoordinator(address operator, bytes quorumNumbers, (uint256,uint256) pubkey, bytes32[] operatorIdsToSwap) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) EjectOperatorFromCoordinator(operator common.Address, quorumNumbers []byte, pubkey BN254G1Point, operatorIdsToSwap [][32]byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.EjectOperatorFromCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, operator, quorumNumbers, pubkey, operatorIdsToSwap)
}

// Initialize is a paid mutator transaction binding the contract method 0x4b76b9d5.
//
// Solidity: function initialize(address _churnApprover, address _ejector, (uint32,uint16,uint16)[] _operatorSetParams, address _pauserRegistry, uint256 _initialPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) Initialize(opts *bind.TransactOpts, _churnApprover common.Address, _ejector common.Address, _operatorSetParams []IBLSRegistryCoordinatorWithIndicesOperatorSetParam, _pauserRegistry common.Address, _initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "initialize", _churnApprover, _ejector, _operatorSetParams, _pauserRegistry, _initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0x4b76b9d5.
//
// Solidity: function initialize(address _churnApprover, address _ejector, (uint32,uint16,uint16)[] _operatorSetParams, address _pauserRegistry, uint256 _initialPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Initialize(_churnApprover common.Address, _ejector common.Address, _operatorSetParams []IBLSRegistryCoordinatorWithIndicesOperatorSetParam, _pauserRegistry common.Address, _initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Initialize(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover, _ejector, _operatorSetParams, _pauserRegistry, _initialPausedStatus)
}

// Initialize is a paid mutator transaction binding the contract method 0x4b76b9d5.
//
// Solidity: function initialize(address _churnApprover, address _ejector, (uint32,uint16,uint16)[] _operatorSetParams, address _pauserRegistry, uint256 _initialPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) Initialize(_churnApprover common.Address, _ejector common.Address, _operatorSetParams []IBLSRegistryCoordinatorWithIndicesOperatorSetParam, _pauserRegistry common.Address, _initialPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Initialize(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover, _ejector, _operatorSetParams, _pauserRegistry, _initialPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Pause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Pause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) PauseAll() (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauseAll(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.PauseAll(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts)
}

// RegisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x25007576.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket, (uint8,address,(uint256,uint256))[] operatorKickParams, (bytes,bytes32,uint256) signatureWithSaltAndExpiry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) RegisterOperatorWithCoordinator(opts *bind.TransactOpts, quorumNumbers []byte, pubkey BN254G1Point, socket string, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, signatureWithSaltAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "registerOperatorWithCoordinator", quorumNumbers, pubkey, socket, operatorKickParams, signatureWithSaltAndExpiry)
}

// RegisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x25007576.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket, (uint8,address,(uint256,uint256))[] operatorKickParams, (bytes,bytes32,uint256) signatureWithSaltAndExpiry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) RegisterOperatorWithCoordinator(quorumNumbers []byte, pubkey BN254G1Point, socket string, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, signatureWithSaltAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket, operatorKickParams, signatureWithSaltAndExpiry)
}

// RegisterOperatorWithCoordinator is a paid mutator transaction binding the contract method 0x25007576.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket, (uint8,address,(uint256,uint256))[] operatorKickParams, (bytes,bytes32,uint256) signatureWithSaltAndExpiry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) RegisterOperatorWithCoordinator(quorumNumbers []byte, pubkey BN254G1Point, socket string, operatorKickParams []IBLSRegistryCoordinatorWithIndicesOperatorKickParam, signatureWithSaltAndExpiry ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket, operatorKickParams, signatureWithSaltAndExpiry)
}

// RegisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0x526ea94e.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, bytes registrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) RegisterOperatorWithCoordinator0(opts *bind.TransactOpts, quorumNumbers []byte, registrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "registerOperatorWithCoordinator0", quorumNumbers, registrationData)
}

// RegisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0x526ea94e.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, bytes registrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) RegisterOperatorWithCoordinator0(quorumNumbers []byte, registrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, registrationData)
}

// RegisterOperatorWithCoordinator0 is a paid mutator transaction binding the contract method 0x526ea94e.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, bytes registrationData) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) RegisterOperatorWithCoordinator0(quorumNumbers []byte, registrationData []byte) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator0(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, registrationData)
}

// RegisterOperatorWithCoordinator1 is a paid mutator transaction binding the contract method 0xc66ab9ca.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) RegisterOperatorWithCoordinator1(opts *bind.TransactOpts, quorumNumbers []byte, pubkey BN254G1Point, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "registerOperatorWithCoordinator1", quorumNumbers, pubkey, socket)
}

// RegisterOperatorWithCoordinator1 is a paid mutator transaction binding the contract method 0xc66ab9ca.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) RegisterOperatorWithCoordinator1(quorumNumbers []byte, pubkey BN254G1Point, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator1(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket)
}

// RegisterOperatorWithCoordinator1 is a paid mutator transaction binding the contract method 0xc66ab9ca.
//
// Solidity: function registerOperatorWithCoordinator(bytes quorumNumbers, (uint256,uint256) pubkey, string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) RegisterOperatorWithCoordinator1(quorumNumbers []byte, pubkey BN254G1Point, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.RegisterOperatorWithCoordinator1(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumbers, pubkey, socket)
}

// SetChurnApprover is a paid mutator transaction binding the contract method 0x29d1e0c3.
//
// Solidity: function setChurnApprover(address _churnApprover) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetChurnApprover(opts *bind.TransactOpts, _churnApprover common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setChurnApprover", _churnApprover)
}

// SetChurnApprover is a paid mutator transaction binding the contract method 0x29d1e0c3.
//
// Solidity: function setChurnApprover(address _churnApprover) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetChurnApprover(_churnApprover common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover)
}

// SetChurnApprover is a paid mutator transaction binding the contract method 0x29d1e0c3.
//
// Solidity: function setChurnApprover(address _churnApprover) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetChurnApprover(_churnApprover common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetChurnApprover(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _churnApprover)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetEjector(opts *bind.TransactOpts, _ejector common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setEjector", _ejector)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetEjector(_ejector common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetEjector(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _ejector)
}

// SetEjector is a paid mutator transaction binding the contract method 0x2cdd1e86.
//
// Solidity: function setEjector(address _ejector) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetEjector(_ejector common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetEjector(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, _ejector)
}

// SetOperatorSetParams is a paid mutator transaction binding the contract method 0x5b0b829f.
//
// Solidity: function setOperatorSetParams(uint8 quorumNumber, (uint32,uint16,uint16) operatorSetParam) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetOperatorSetParams(opts *bind.TransactOpts, quorumNumber uint8, operatorSetParam IBLSRegistryCoordinatorWithIndicesOperatorSetParam) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setOperatorSetParams", quorumNumber, operatorSetParam)
}

// SetOperatorSetParams is a paid mutator transaction binding the contract method 0x5b0b829f.
//
// Solidity: function setOperatorSetParams(uint8 quorumNumber, (uint32,uint16,uint16) operatorSetParam) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetOperatorSetParams(quorumNumber uint8, operatorSetParam IBLSRegistryCoordinatorWithIndicesOperatorSetParam) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumber, operatorSetParam)
}

// SetOperatorSetParams is a paid mutator transaction binding the contract method 0x5b0b829f.
//
// Solidity: function setOperatorSetParams(uint8 quorumNumber, (uint32,uint16,uint16) operatorSetParam) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetOperatorSetParams(quorumNumber uint8, operatorSetParam IBLSRegistryCoordinatorWithIndicesOperatorSetParam) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetOperatorSetParams(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, quorumNumber, operatorSetParam)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetPauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.SetPauserRegistry(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPauserRegistry)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Unpause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.Unpause(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, newPausedStatus)
}

// UpdateSocket is a paid mutator transaction binding the contract method 0x0cf4b767.
//
// Solidity: function updateSocket(string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactor) UpdateSocket(opts *bind.TransactOpts, socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.contract.Transact(opts, "updateSocket", socket)
}

// UpdateSocket is a paid mutator transaction binding the contract method 0x0cf4b767.
//
// Solidity: function updateSocket(string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesSession) UpdateSocket(socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.UpdateSocket(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, socket)
}

// UpdateSocket is a paid mutator transaction binding the contract method 0x0cf4b767.
//
// Solidity: function updateSocket(string socket) returns()
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesTransactorSession) UpdateSocket(socket string) (*types.Transaction, error) {
	return _ContractBLSRegistryCoordinatorWithIndices.Contract.UpdateSocket(&_ContractBLSRegistryCoordinatorWithIndices.TransactOpts, socket)
}

// ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator is returned from FilterChurnApproverUpdated and is used to iterate over the raw logs and unpacked data for ChurnApproverUpdated events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated represents a ChurnApproverUpdated event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated struct {
	PrevChurnApprover common.Address
	NewChurnApprover  common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterChurnApproverUpdated is a free log retrieval operation binding the contract event 0x315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c.
//
// Solidity: event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterChurnApproverUpdated(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "ChurnApproverUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdatedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "ChurnApproverUpdated", logs: logs, sub: sub}, nil
}

// WatchChurnApproverUpdated is a free log subscription operation binding the contract event 0x315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c.
//
// Solidity: event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchChurnApproverUpdated(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "ChurnApproverUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "ChurnApproverUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChurnApproverUpdated is a log parse operation binding the contract event 0x315457d8a8fe60f04af17c16e2f5a5e1db612b31648e58030360759ef8f3528c.
//
// Solidity: event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseChurnApproverUpdated(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesChurnApproverUpdated)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "ChurnApproverUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator is returned from FilterEjectorUpdated and is used to iterate over the raw logs and unpacked data for EjectorUpdated events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated represents a EjectorUpdated event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated struct {
	PrevEjector common.Address
	NewEjector  common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEjectorUpdated is a free log retrieval operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterEjectorUpdated(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "EjectorUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesEjectorUpdatedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "EjectorUpdated", logs: logs, sub: sub}, nil
}

// WatchEjectorUpdated is a free log subscription operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchEjectorUpdated(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "EjectorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "EjectorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEjectorUpdated is a log parse operation binding the contract event 0x8f30ab09f43a6c157d7fce7e0a13c003042c1c95e8a72e7a146a21c0caa24dc9.
//
// Solidity: event EjectorUpdated(address prevEjector, address newEjector)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseEjectorUpdated(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesEjectorUpdated)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "EjectorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesInitializedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesInitialized represents a Initialized event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesInitializedIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesInitializedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseInitialized(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesInitialized, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesInitialized)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator is returned from FilterOperatorDeregistered and is used to iterate over the raw logs and unpacked data for OperatorDeregistered events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered represents a OperatorDeregistered event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered struct {
	Operator   common.Address
	OperatorId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorDeregistered is a free log retrieval operation binding the contract event 0x396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e4.
//
// Solidity: event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorDeregistered(opts *bind.FilterOpts, operator []common.Address, operatorId [][32]byte) (*ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorDeregistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorDeregisteredIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorDeregistered", logs: logs, sub: sub}, nil
}

// WatchOperatorDeregistered is a free log subscription operation binding the contract event 0x396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e4.
//
// Solidity: event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorDeregistered(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered, operator []common.Address, operatorId [][32]byte) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorDeregistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorDeregistered is a log parse operation binding the contract event 0x396fdcb180cb0fea26928113fb0fd1c3549863f9cd563e6a184f1d578116c8e4.
//
// Solidity: event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorDeregistered(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorDeregistered)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator is returned from FilterOperatorRegistered and is used to iterate over the raw logs and unpacked data for OperatorRegistered events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered represents a OperatorRegistered event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered struct {
	Operator   common.Address
	OperatorId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorRegistered is a free log retrieval operation binding the contract event 0xe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe.
//
// Solidity: event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorRegistered(opts *bind.FilterOpts, operator []common.Address, operatorId [][32]byte) (*ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorRegistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorRegisteredIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorRegistered", logs: logs, sub: sub}, nil
}

// WatchOperatorRegistered is a free log subscription operation binding the contract event 0xe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe.
//
// Solidity: event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorRegistered(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered, operator []common.Address, operatorId [][32]byte) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorRegistered", operatorRule, operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRegistered is a log parse operation binding the contract event 0xe8e68cef1c3a761ed7be7e8463a375f27f7bc335e51824223cacce636ec5c3fe.
//
// Solidity: event OperatorRegistered(address indexed operator, bytes32 indexed operatorId)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorRegistered(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorRegistered)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator is returned from FilterOperatorSetParamsUpdated and is used to iterate over the raw logs and unpacked data for OperatorSetParamsUpdated events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated represents a OperatorSetParamsUpdated event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated struct {
	QuorumNumber      uint8
	OperatorSetParams IBLSRegistryCoordinatorWithIndicesOperatorSetParam
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOperatorSetParamsUpdated is a free log retrieval operation binding the contract event 0x3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac.
//
// Solidity: event OperatorSetParamsUpdated(uint8 indexed quorumNumber, (uint32,uint16,uint16) operatorSetParams)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorSetParamsUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorSetParamsUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdatedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorSetParamsUpdated", logs: logs, sub: sub}, nil
}

// WatchOperatorSetParamsUpdated is a free log subscription operation binding the contract event 0x3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac.
//
// Solidity: event OperatorSetParamsUpdated(uint8 indexed quorumNumber, (uint32,uint16,uint16) operatorSetParams)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorSetParamsUpdated(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorSetParamsUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSetParamsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSetParamsUpdated is a log parse operation binding the contract event 0x3ee6fe8d54610244c3e9d3c066ae4aee997884aa28f10616ae821925401318ac.
//
// Solidity: event OperatorSetParamsUpdated(uint8 indexed quorumNumber, (uint32,uint16,uint16) operatorSetParams)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorSetParamsUpdated(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSetParamsUpdated)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSetParamsUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator is returned from FilterOperatorSocketUpdate and is used to iterate over the raw logs and unpacked data for OperatorSocketUpdate events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate represents a OperatorSocketUpdate event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate struct {
	OperatorId [32]byte
	Socket     string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorSocketUpdate is a free log retrieval operation binding the contract event 0xec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa.
//
// Solidity: event OperatorSocketUpdate(bytes32 operatorId, string socket)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterOperatorSocketUpdate(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "OperatorSocketUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdateIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "OperatorSocketUpdate", logs: logs, sub: sub}, nil
}

// WatchOperatorSocketUpdate is a free log subscription operation binding the contract event 0xec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa.
//
// Solidity: event OperatorSocketUpdate(bytes32 operatorId, string socket)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchOperatorSocketUpdate(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "OperatorSocketUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSocketUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSocketUpdate is a log parse operation binding the contract event 0xec2963ab21c1e50e1e582aa542af2e4bf7bf38e6e1403c27b42e1c5d6e621eaa.
//
// Solidity: event OperatorSocketUpdate(bytes32 operatorId, string socket)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseOperatorSocketUpdate(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesOperatorSocketUpdate)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "OperatorSocketUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPausedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesPaused represents a Paused event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractBLSRegistryCoordinatorWithIndicesPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesPausedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesPaused)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParsePaused(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesPaused, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesPaused)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet represents a PauserRegistrySet event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySetIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParsePauserRegistrySet(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesPauserRegistrySet)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator struct {
	Event *ContractBLSRegistryCoordinatorWithIndicesUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractBLSRegistryCoordinatorWithIndicesUnpaused represents a Unpaused event raised by the ContractBLSRegistryCoordinatorWithIndices contract.
type ContractBLSRegistryCoordinatorWithIndicesUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractBLSRegistryCoordinatorWithIndicesUnpausedIterator{contract: _ContractBLSRegistryCoordinatorWithIndices.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractBLSRegistryCoordinatorWithIndicesUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractBLSRegistryCoordinatorWithIndices.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
				if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractBLSRegistryCoordinatorWithIndices *ContractBLSRegistryCoordinatorWithIndicesFilterer) ParseUnpaused(log types.Log) (*ContractBLSRegistryCoordinatorWithIndicesUnpaused, error) {
	event := new(ContractBLSRegistryCoordinatorWithIndicesUnpaused)
	if err := _ContractBLSRegistryCoordinatorWithIndices.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
